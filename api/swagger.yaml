openapi: 3.0.0
info:
  title: Bookstore
  description: A simple Bookstore API example.
  version: "1.0"
servers:
- url: https://virtserver.swaggerhub.com/vgb/bookstore/1.0
  description: SwaggerHub API Auto Mocking
security:
- api_key: []
paths:
  /shelves:
    get:
      description: Return all shelves in the bookstore.
      operationId: listShelves
      responses:
        "200":
          description: List of shelves in the bookstore.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listShelvesResponse'
      security: []
    post:
      description: Create a new shelf in the bookstore.
      operationId: createShelf
      requestBody:
        description: A shelf resource to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shelf'
        required: true
      responses:
        "200":
          description: A newly created shelf resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shelf'
    delete:
      description: Delete all shelves.
      operationId: deleteShelves
      responses:
        default:
          description: An empty response body.
  /shelves/{shelf}:
    get:
      description: Get a single shelf resource with the given ID.
      operationId: getShelf
      parameters:
      - name: shelf
        in: path
        description: ID of the shelf to get.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: A shelf resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shelf'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      description: Delete a single shelf with the given ID.
      operationId: deleteShelf
      parameters:
      - name: shelf
        in: path
        description: ID of the shelf to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: An empty response body.
  /shelves/{shelf}/books:
    get:
      description: Return all books in a shelf with the given ID.
      operationId: listBooks
      parameters:
      - name: shelf
        in: path
        description: ID of the shelf whose books should be returned.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of books on the specified shelf.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBooksResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      description: Create a new book on the shelf.
      operationId: createBook
      parameters:
      - name: shelf
        in: path
        description: ID of the shelf where the book should be created.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Book to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
        required: true
      responses:
        "200":
          description: A newly created book resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /shelves/{shelf}/books/{book}:
    get:
      description: Get a single book with a given ID from a shelf.
      operationId: getBook
      parameters:
      - name: shelf
        in: path
        description: ID of the shelf from which to get the book.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: book
        in: path
        description: ID of the book to get from the shelf.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: A book resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      description: Delete a single book with a given ID from a shelf.
      operationId: deleteBook
      parameters:
      - name: shelf
        in: path
        description: ID of the shelf from which to delete the book.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: book
        in: path
        description: ID of the book to delete from the shelf.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: An empty response body.
components:
  schemas:
    book:
      required:
      - author
      - name
      - title
      type: object
      properties:
        author:
          type: string
        name:
          type: string
        title:
          type: string
      example:
        author: author
        name: name
        title: title
    listBooksResponse:
      required:
      - books
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/book'
      example:
        books:
        - author: author
          name: name
          title: title
        - author: author
          name: name
          title: title
    listShelvesResponse:
      type: object
      properties:
        shelves:
          type: array
          items:
            $ref: '#/components/schemas/shelf'
      example:
        shelves:
        - name: name
          theme: theme
        - name: name
          theme: theme
    shelf:
      required:
      - name
      - theme
      type: object
      properties:
        name:
          type: string
        theme:
          type: string
      example:
        name: name
        theme: theme
    error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: key
      in: query
